"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jovo_core_1 = require("jovo-core");
const _get = require("lodash.get");
const __1 = require("..");
class FacebookMessengerCore {
    install(messenger) {
        this.launchPayload = messenger.config.launch.data;
        this.locale = messenger.config.locale;
        messenger.middleware('$init').use(this.init.bind(this));
        messenger.middleware('$request').use(this.request.bind(this));
        messenger.middleware('$type').use(this.type.bind(this));
        messenger.middleware('$session').use(this.session.bind(this));
        messenger.middleware('$output').use(this.output.bind(this));
    }
    async init(handleRequest) {
        const requestObject = handleRequest.host.getRequestObject();
        if (requestObject &&
            requestObject.id &&
            requestObject.time &&
            requestObject.messaging &&
            requestObject.messaging[0]) {
            handleRequest.jovo = new __1.MessengerBot(handleRequest.app, handleRequest.host, handleRequest);
        }
    }
    async request(messengerBot) {
        if (!messengerBot.$host) {
            throw new Error(`Couldn't access host object.`);
        }
        messengerBot.$request = __1.MessengerBotRequest.fromJSON(messengerBot.$host.getRequestObject());
        messengerBot.$request.setLocale(this.locale);
        messengerBot.$user = new __1.MessengerBotUser(messengerBot);
    }
    async type(messengerBot) {
        let type = jovo_core_1.EnumRequestType.INTENT;
        const payload = _get(messengerBot, '$request.messaging[0].postback.payload');
        if (!!payload && !!this.launchPayload && payload === this.launchPayload) {
            type = jovo_core_1.EnumRequestType.LAUNCH;
        }
        messengerBot.$type = {
            type,
        };
    }
    async session(messengerBot) {
        var _a;
        if (!messengerBot.$session) {
            messengerBot.$session = { $data: {} };
        }
        messengerBot.$session.$data = Object.assign({}, (_a = messengerBot.$user.$session) === null || _a === void 0 ? void 0 : _a.$data);
    }
    async output(messengerBot) {
        const output = messengerBot.$output;
        if (!messengerBot.$response) {
            messengerBot.$response = new __1.MessengerBotResponse();
        }
        const response = messengerBot.$response;
        if (Object.keys(output).length === 0) {
            return;
        }
        const setText = _get(output, 'FacebookMessenger.Overwrite.Text');
        const overWriteQuickReplies = _get(output, 'FacebookMessenger.Overwrite.QuickReplies');
        const tell = _get(output, 'tell');
        if (tell) {
            const text = setText || tell.speech.toString();
            const textMessage = new __1.TextMessage({ id: messengerBot.$user.getId() }, { text, quickReplies: overWriteQuickReplies });
            response.messages.push(textMessage);
        }
        const ask = _get(output, 'ask');
        if (ask) {
            const text = setText || ask.speech.toString();
            const textMessage = new __1.TextMessage({ id: messengerBot.$user.getId() }, { text, quickReplies: overWriteQuickReplies });
            response.messages.push(textMessage);
        }
        const messages = _get(output, 'FacebookMessenger.Messages');
        if (messages && messages.length > 0) {
            response.messages.push(...messages);
        }
    }
}
exports.FacebookMessengerCore = FacebookMessengerCore;
//# sourceMappingURL=FacebookMessengerCore.js.map