"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const MessengerBotRequest_1 = require("./MessengerBotRequest");
const samples = {
    IntentRequest: 'IntentRequest.json',
    LaunchRequest: 'LaunchRequest.json',
};
class FacebookMessengerRequestBuilder {
    constructor() {
        this.type = 'MessengerBot';
    }
    // not supported
    async audioPlayerRequest(json) {
        return new MessengerBotRequest_1.MessengerBotRequest();
    }
    // not supported
    async end(json) {
        return new MessengerBotRequest_1.MessengerBotRequest();
    }
    async intent(json, slots) {
        if (typeof json === 'string') {
            const req = await this.intentRequest();
            req.setIntentName(json);
            return req;
        }
        return this.intentRequest(json);
    }
    async intentRequest(json) {
        if (json) {
            return MessengerBotRequest_1.MessengerBotRequest.fromJSON(json);
        }
        else {
            const request = JSON.stringify(require(getJsonFilePath('IntentRequest')));
            return MessengerBotRequest_1.MessengerBotRequest.fromJSON(JSON.parse(request)).setTimestamp(new Date().toISOString());
        }
    }
    async launch(json) {
        return this.launchRequest(json);
    }
    async launchRequest(json) {
        if (json) {
            return MessengerBotRequest_1.MessengerBotRequest.fromJSON(json);
        }
        else {
            const request = JSON.stringify(require(getJsonFilePath('LaunchRequest')));
            return MessengerBotRequest_1.MessengerBotRequest.fromJSON(JSON.parse(request)).setTimestamp(new Date().toISOString());
        }
    }
    async rawRequest(json) {
        return MessengerBotRequest_1.MessengerBotRequest.fromJSON(json);
    }
    async rawRequestByKey(key) {
        const request = JSON.stringify(require(getJsonFilePath(key)));
        return MessengerBotRequest_1.MessengerBotRequest.fromJSON(JSON.parse(request));
    }
}
exports.FacebookMessengerRequestBuilder = FacebookMessengerRequestBuilder;
function getJsonFilePath(key, version = 'v1') {
    let folder = './../../../';
    if (process.env.NODE_ENV === 'UNIT_TEST') {
        folder = './../../';
    }
    const fileName = samples[key];
    if (!fileName) {
        throw new Error(`Can't find file.`);
    }
    return path.join(folder, 'sample-request-json', version, fileName);
}
//# sourceMappingURL=FacebookMessengerRequestBuilder.js.map