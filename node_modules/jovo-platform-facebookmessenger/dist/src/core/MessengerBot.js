"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jovo_core_1 = require("jovo-core");
const _get = require("lodash.get");
const _set = require("lodash.set");
const __1 = require("..");
const MessengerBotSpeechBuilder_1 = require("./MessengerBotSpeechBuilder");
const MessengerBotUser_1 = require("./MessengerBotUser");
class MessengerBot extends jovo_core_1.Jovo {
    constructor(app, host, handleRequest) {
        super(app, host, handleRequest);
        this.$messengerBot = this;
        this.$speech = new MessengerBotSpeechBuilder_1.MessengerBotSpeechBuilder(this);
        this.$reprompt = new MessengerBotSpeechBuilder_1.MessengerBotSpeechBuilder(this);
        this.$user = new MessengerBotUser_1.MessengerBotUser(this);
        _set(this.$output, 'FacebookMessenger.Messages', []);
    }
    getDeviceId() {
        return undefined;
    }
    getLocale() {
        return this.$request ? this.$request.getLocale() : 'en-US';
    }
    getPlatformType() {
        return 'FacebookMessenger';
    }
    getRawText() {
        return (_get(this, '$request.messaging[0].message.text') ||
            _get(this, '$request.messaging[0].postback.title'));
    }
    getAudioData() {
        return undefined;
    }
    getSelectedElementId() {
        return undefined;
    }
    getSpeechBuilder() {
        return new MessengerBotSpeechBuilder_1.MessengerBotSpeechBuilder(this);
    }
    getTimestamp() {
        return this.$request ? this.$request.getTimestamp() : undefined;
    }
    getType() {
        return 'MessengerBot';
    }
    hasAudioInterface() {
        return false;
    }
    hasScreenInterface() {
        return false;
    }
    hasVideoInterface() {
        return false;
    }
    isNewSession() {
        if (this.$user.$session && typeof this.$user.$session.isNew !== 'undefined') {
            return this.$user.$session.isNew;
        }
        return true;
    }
    speechBuilder() {
        return this.getSpeechBuilder();
    }
    // Output methods
    setText(text) {
        _set(this.$output.FacebookMessenger, 'Overwrite.Text', text);
        return this;
    }
    showQuickReplies(quickReplies) {
        return this.setQuickReplies(quickReplies);
    }
    setQuickReplies(quickReplies) {
        _set(this.$output.FacebookMessenger, 'Overwrite.QuickReplies', quickReplies);
        return this;
    }
    addQuickReply(quickReply) {
        const quickReplies = _get(this.$output.FacebookMessenger, 'Overwrite.QuickReplies');
        quickReplies.push(quickReply);
        _set(this.$output.FacebookMessenger, 'Overwrite.QuickReplies', quickReplies);
        return this;
    }
    showText(options) {
        const message = new __1.TextMessage({ id: this.$user.getId() }, Object.assign({}, options));
        this.$output.FacebookMessenger.Messages.push(message);
        return this;
    }
    showAttachment(options) {
        const message = new __1.AttachmentMessage({ id: this.$user.getId() }, options);
        this.$output.FacebookMessenger.Messages.push(message);
        return this;
    }
    showAirlineTemplate(options) {
        const payload = Object.assign(Object.assign({}, options), { template_type: __1.TemplateType.Airline });
        const message = new __1.AirlineTemplate({ id: this.$user.getId() }, payload);
        this.$output.FacebookMessenger.Messages.push(message);
        return this;
    }
    showButtonTemplate(options) {
        const payload = Object.assign(Object.assign({}, options), { template_type: __1.TemplateType.Button });
        const message = new __1.ButtonTemplate({ id: this.$user.getId() }, payload);
        this.$output.FacebookMessenger.Messages.push(message);
        return this;
    }
    showGenericTemplate(options) {
        const payload = Object.assign(Object.assign({}, options), { template_type: __1.TemplateType.Generic });
        const message = new __1.GenericTemplate({ id: this.$user.getId() }, payload);
        this.$output.FacebookMessenger.Messages.push(message);
        return this;
    }
    showMediaTemplate(options) {
        const payload = Object.assign(Object.assign({}, options), { template_type: __1.TemplateType.Media });
        const message = new __1.MediaTemplate({ id: this.$user.getId() }, payload);
        this.$output.FacebookMessenger.Messages.push(message);
        return this;
    }
    showReceiptTemplate(options) {
        const payload = Object.assign(Object.assign({}, options), { template_type: __1.TemplateType.Receipt });
        const message = new __1.ReceiptTemplate({ id: this.$user.getId() }, payload);
        this.$output.FacebookMessenger.Messages.push(message);
        return this;
    }
    async showAction(action) {
        const message = new __1.SenderAction({ id: this.$user.getId() }, action);
        const pageAccessToken = _get(this.$config, 'plugin.FacebookMessenger.pageAccessToken', '');
        const version = _get(this.$config, 'plugin.FacebookMessenger.version', __1.DEFAULT_VERSION);
        const result = await message.send(pageAccessToken, version);
        return !!result;
    }
}
exports.MessengerBot = MessengerBot;
//# sourceMappingURL=MessengerBot.js.map