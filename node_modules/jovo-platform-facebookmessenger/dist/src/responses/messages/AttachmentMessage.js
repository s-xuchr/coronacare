"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FormData = require("form-data");
const fs_1 = require("fs");
const jovo_core_1 = require("jovo-core");
const __1 = require("../..");
class AttachmentMessage extends __1.Message {
    constructor(recipient, options) {
        super(recipient);
        this.recipient = recipient;
        this.options = options;
    }
    send(pageAccessToken, version) {
        const isFile = this.isFileData();
        const isUrl = this.isUrlData();
        const isAttachmentId = this.isAttachmentIdData();
        if (isFile) {
            return this.sendFile(pageAccessToken, version);
        }
        const data = {
            message: {
                attachment: {
                    payload: {},
                    type: this.options.type,
                },
                quick_replies: this.options.quickReplies
                    ? this.options.quickReplies.map((quickReply) => {
                        return typeof quickReply === 'string' ? new __1.TextQuickReply(quickReply) : quickReply;
                    })
                    : undefined,
            },
            recipient: this.recipient,
        };
        if (isUrl) {
            data.message.attachment.payload.url = this.options.data;
            data.message.attachment.payload.is_reusable = this.options.isReusable || true;
        }
        else if (isAttachmentId) {
            data.message.attachment.payload.attachment_id = this.options.data.toString();
        }
        const config = this.getConfig(pageAccessToken, version);
        config.data = data;
        return jovo_core_1.HttpService.request(config);
    }
    sendFile(pageAccessToken, version) {
        const message = {
            attachment: {
                type: this.options.type,
                payload: { is_reusable: this.options.isReusable || true },
            },
            quick_replies: this.options.quickReplies
                ? this.options.quickReplies.map((quickReply) => {
                    return typeof quickReply === 'string' ? new __1.TextQuickReply(quickReply) : quickReply;
                })
                : undefined,
        };
        const { path, mimeType, fileName } = this.options.data;
        const form = new FormData();
        form.append('recipient', JSON.stringify(this.recipient));
        form.append('message', JSON.stringify(message));
        form.append('filedata', fs_1.createReadStream(path), {
            filename: fileName,
            contentType: mimeType || undefined,
        });
        const url = `${__1.BASE_URL}${this.getPath(pageAccessToken, version)}`;
        return jovo_core_1.HttpService.post(url, form, { headers: form.getHeaders() });
    }
    isUrlData() {
        return typeof this.options.data === 'string';
    }
    isAttachmentIdData() {
        return typeof this.options.data === 'number';
    }
    isFileData() {
        return typeof this.options.data === 'object';
    }
}
exports.AttachmentMessage = AttachmentMessage;
//# sourceMappingURL=AttachmentMessage.js.map