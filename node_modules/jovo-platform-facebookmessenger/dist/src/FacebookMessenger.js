"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jovo_core_1 = require("jovo-core");
const _get = require("lodash.get");
const _merge = require("lodash.merge");
const _set = require("lodash.set");
const _1 = require(".");
class FacebookMessenger extends jovo_core_1.Platform {
    constructor(config) {
        super(config);
        this.requestBuilder = new _1.FacebookMessengerRequestBuilder();
        this.responseBuilder = new _1.FacebookMessengerResponseBuilder();
        this.config = {
            shouldOverrideAppHandle: true,
            greeting: {
                updateOnSetup: false,
            },
            launch: {
                updateOnSetup: false,
            },
            pageAccessToken: process.env.FB_PAGE_ACCESS_TOKEN || '',
            verifyToken: process.env.FB_VERIFY_TOKEN || '',
            locale: process.env.FB_LOCALE || 'en-US',
            version: _1.DEFAULT_VERSION,
            userProfileFields: process.env.FB_USER_PROFILE_FIELDS || 'first_name,last_name,profile_pic,locale',
            fetchUserProfile: true,
        };
        if (config) {
            this.config = _merge(this.config, config);
        }
    }
    getAppType() {
        return 'MessengerBot';
    }
    install(app) {
        if (!_get(app.config, `user.sessionData`)) {
            _set(app.$plugins.get('JovoUser').config, 'sessionData.enabled', true);
            _set(app.$plugins.get('JovoUser').config, 'sessionData.data', true);
        }
        app.$platform.set(this.constructor.name, this);
        app.middleware('setup').use(this.setup.bind(this));
        app.middleware('request').use(this.request.bind(this));
        app.middleware('platform.init').use(this.initialize.bind(this));
        app.middleware('nlu').use(this.nlu.bind(this));
        app.middleware('after.user.load').use(this.afterUserLoad.bind(this));
        app.middleware('before.handler').use(this.beforeHandler.bind(this));
        app.middleware('platform.output').use(this.output.bind(this));
        app.middleware('response').use(this.response.bind(this));
        this.use(new _1.FacebookMessengerCore());
        jovo_core_1.Jovo.prototype.$messengerBot = undefined;
        jovo_core_1.Jovo.prototype.messengerBot = function () {
            if (this.constructor.name !== 'MessengerBot') {
                throw Error(`Can't handle request. Please use this.isMessengerBot()`);
            }
            return this;
        };
        jovo_core_1.Jovo.prototype.isMessengerBot = function () {
            return this.constructor.name === 'MessengerBot';
        };
        if (this.config.shouldOverrideAppHandle) {
            this.overrideAppHandle();
        }
    }
    async setup(handleRequest) {
        await this.middleware('setup').run(handleRequest);
        if (this.isVerifyRequest(handleRequest.host)) {
            return;
        }
        const path = `/${this.config.version}/me/messenger_profile?access_token=${this.config.pageAccessToken}`;
        const url = _1.BASE_URL + path;
        const data = {};
        if (this.config.launch && this.config.launch.updateOnSetup) {
            const launchPayload = this.config.launch.data;
            if (!launchPayload) {
                throw new jovo_core_1.JovoError(`Cannot set launch-payload to 'undefined'!`, jovo_core_1.ErrorCode.ERR_PLUGIN, 'FacebookMessenger');
            }
            data.get_started = {
                payload: launchPayload,
            };
        }
        if (this.config.greeting && this.config.greeting.updateOnSetup) {
            const greetingElements = this.config.greeting.data;
            if (!greetingElements || greetingElements.length < 1) {
                throw new jovo_core_1.JovoError(`Cannot set greeting-elements to 'undefined' or an empty array.`, jovo_core_1.ErrorCode.ERR_PLUGIN, 'FacebookMessenger');
            }
            data.greeting = greetingElements;
        }
        if (Object.keys(data).length === 0) {
            return;
        }
        const config = {
            url,
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            data,
        };
        try {
            await jovo_core_1.HttpService.request(config);
        }
        catch (e) {
            const errorMessage = e.response.data.error.message;
            throw new jovo_core_1.JovoError(`${e.message}: ${errorMessage}`, jovo_core_1.ErrorCode.ERR_PLUGIN, 'FacebookMessenger', errorMessage, `The reason for that might be a missing 'pageAccessToken' or an invalid value for 'greeting' or 'launch'`);
        }
    }
    async request(handleRequest) {
        if (!this.isVerifyRequest(handleRequest.host)) {
            return;
        }
        const queryParams = handleRequest.host.getQueryParams();
        const token = queryParams['hub.verify_token'];
        const challenge = queryParams['hub.challenge'];
        if (token === this.config.verifyToken) {
            handleRequest.stopMiddlewareExecution();
            await handleRequest.host.setResponse(+challenge);
        }
        else {
            throw new jovo_core_1.JovoError('The verify token that was set in the config does not match the verify token in the request!', jovo_core_1.ErrorCode.ERR, 'FacebookMessenger', `verify token in the config '${this.config.verifyToken}' does not match the passed verify token '${token}'!`, 'Check the verify token in the config and in the webhook-verification-form.');
        }
    }
    async initialize(handleRequest) {
        handleRequest.platformClazz = _1.MessengerBot;
        await this.middleware('$init').run(handleRequest);
        if (!handleRequest.jovo || handleRequest.jovo.constructor.name !== this.getAppType()) {
            return Promise.resolve();
        }
        await this.middleware('$request').run(handleRequest.jovo);
        await this.middleware('$type').run(handleRequest.jovo);
    }
    async nlu(handleRequest) {
        if (!handleRequest.jovo || handleRequest.jovo.constructor.name !== this.getAppType()) {
            return Promise.resolve();
        }
        await this.middleware('$nlu').run(handleRequest.jovo);
        await this.middleware('$inputs').run(handleRequest.jovo);
    }
    async afterUserLoad(handleRequest) {
        if (!handleRequest.jovo || handleRequest.jovo.constructor.name !== this.getAppType()) {
            return Promise.resolve();
        }
        await this.middleware('$session').run(handleRequest.jovo);
    }
    async beforeHandler(handleRequest) {
        if (!handleRequest.jovo || handleRequest.jovo.constructor.name !== this.getAppType()) {
            return Promise.resolve();
        }
        const user = handleRequest.jovo.$user;
        if (handleRequest.jovo.$session.$data.userProfile) {
            user.profile = handleRequest.jovo.$session.$data.userProfile;
        }
        else if (this.config.fetchUserProfile && handleRequest.jovo.isNewSession()) {
            await user.fetchAndSetProfile(this.config.userProfileFields);
            handleRequest.jovo.$session.$data.userProfile = user.profile;
        }
        if (user.profile && user.profile.locale) {
            const locale = user.profile.locale.replace('_', '-');
            handleRequest.jovo.$request.setLocale(locale);
        }
    }
    async output(handleRequest) {
        if (!handleRequest.jovo || handleRequest.jovo.constructor.name !== this.getAppType()) {
            return Promise.resolve();
        }
        await this.middleware('$output').run(handleRequest.jovo);
    }
    async response(handleRequest) {
        if (!handleRequest.jovo || handleRequest.jovo.constructor.name !== this.getAppType()) {
            return Promise.resolve();
        }
        const messengerBot = handleRequest.jovo;
        await this.middleware('$response').run(messengerBot);
        const messages = _get(messengerBot, '$response.messages', []);
        const pageAccessToken = _get(handleRequest.jovo.$config, 'plugin.FacebookMessenger.pageAccessToken', '');
        for (const message of messages) {
            message
                .send(pageAccessToken, this.config.version)
                .then((res) => {
                jovo_core_1.Log.debug(res.data);
            })
                .catch((e) => {
                jovo_core_1.Log.error(`Error while sending message:\n${e}`);
            });
        }
    }
    makeTestSuite() {
        return new jovo_core_1.TestSuite(new _1.FacebookMessengerRequestBuilder(), new _1.FacebookMessengerResponseBuilder());
    }
    isVerifyRequest(host) {
        const queryParams = host.getQueryParams();
        const mode = queryParams['hub.mode'];
        const token = queryParams['hub.verify_token'];
        const challenge = queryParams['hub.challenge'];
        return mode === 'subscribe' && !!token && !!challenge;
    }
    overrideAppHandle() {
        const PROTOTYPE_BACKUP = jovo_core_1.BaseApp.prototype.handle;
        jovo_core_1.BaseApp.prototype.handle = async function (host) {
            const request = host.getRequestObject();
            const isMessengerRequest = request &&
                request.object === 'page' &&
                request.entry &&
                Array.isArray(request.entry) &&
                request.entry.length > 0;
            if (isMessengerRequest) {
                const promises = [];
                request.entry.forEach((entry) => {
                    const hostCopy = Object.create(host.constructor.prototype);
                    // tslint:disable-next-line
                    hostCopy.setResponse = async function (obj) {
                        return;
                    };
                    for (const key in host) {
                        if (host.hasOwnProperty(key)) {
                            const value = host[key];
                            if (key === '$request') {
                                hostCopy[key] = entry;
                            }
                            else {
                                hostCopy[key] =
                                    typeof value === 'object' && value.constructor.name === 'Object'
                                        ? Object.assign({}, value) : value;
                            }
                        }
                    }
                    promises.push(PROTOTYPE_BACKUP.call(this, hostCopy));
                });
                await Promise.all(promises);
                return host.setResponse({});
            }
            return PROTOTYPE_BACKUP.call(this, host);
        };
    }
}
exports.FacebookMessenger = FacebookMessenger;
//# sourceMappingURL=FacebookMessenger.js.map